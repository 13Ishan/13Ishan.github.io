import cv2
import mediapipe as mp

mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
mp_drawing = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)  # 0 usually represents the default webcam

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        continue

    frame = cv2.flip(frame, 1) # Flip the frame horizontally
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    index_y = 0
    thumb_y = 0
    middle_y = 0
    ring_y = 0
    pinky_y = 0

    index_x = 0
    thumb_x = 0
    middle_x = 0
    ring_x = 0
    pinky_x = 0

    thumb_up = False
    thumb_down = False
    finger_count = 0

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Simplified finger counting logic (thumb, index, middle, ring, pinky)
            
            thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
            index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
            middle_tip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP]
            ring_tip = hand_landmarks.landmark[mp_hands.HandLandmark.RING_FINGER_TIP]
            pinky_tip = hand_landmarks.landmark[mp_hands.HandLandmark.PINKY_TIP]
           
            thumb_ip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_IP]
            index_dip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_DIP]
            middle_dip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_DIP]
            ring_dip = hand_landmarks.landmark[mp_hands.HandLandmark.RING_FINGER_DIP]
            pinky_dip = hand_landmarks.landmark[mp_hands.HandLandmark.PINKY_DIP]

            if thumb_tip.y < thumb_ip.y:
                finger_count += 1 
            if index_tip.y < index_dip.y:
                finger_count += 1
            if middle_tip.y < middle_dip.y:
                finger_count += 1
            if ring_tip.y < ring_dip.y:
                finger_count += 1
            if pinky_tip.y < pinky_dip.y:
                finger_count += 1
            if thumb_tip.y < index_tip.y:
                thumb_up = True
            if thumb_tip.y > index_tip.y:
                thumb_down = True

            thumb_y = thumb_tip.y
            index_y = index_tip.y
            middle_y = middle_tip.y
            ring_y = ring_tip.y
            pinky_y = pinky_tip.y

            thumb_x = thumb_tip.x
            index_x = index_tip.x
            middle_x = middle_tip.x
            ring_x = ring_tip.x
            pinky_x = pinky_tip.x

    # Display the Y for the fingers
    cv2.putText(frame, f"Fingers: {finger_count}", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Thumb Y: {thumb_y}", (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Index Y: {index_y}", (10, 150), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Middle Y: {middle_y}", (10, 200), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Ring Y: {ring_y}", (10, 250), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Pinky Y: {pinky_y}", (10, 300), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    # Display the X for the fingers
    cv2.putText(frame, f"Thumb X: {thumb_x}", (10, 350), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Index X: {index_x}", (10, 400), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Middle X: {middle_x}", (10, 450), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Ring X: {ring_x}", (10, 500), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f"Pinky X: {pinky_x}", (10, 550), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display thumb up or down
    if thumb_up:
        cv2.putText(frame, "Thumb Up", (10, 600), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    elif thumb_down:
        cv2.putText(frame, "Thumb Down", (10, 600), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow('Hand Tracking', frame)


    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
hands.close()
